{
  "openapi": "3.0.0",
  "info": {
    "title": "Node API boilerplate",
    "version": "v1"
  },
  "servers": [
    {
      "description": "Local server",
      "url": "/api"
    }
  ],
  "paths": {
    "/users": {
      "get": {
        "operationId": "listUsers",
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "List of all users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createUser",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "description": "User data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "User not created because of validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "operationId": "showUser",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of user to show",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "ing64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return user with given id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateUser",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of user to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "ing64"
            }
          }
        ],
        "requestBody": {
          "description": "User new data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUser"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteUser",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of user to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "ing64"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "User deleted successfully"
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      }
    },
    "/customers": {
      "get": {
        "operationId": "listCustomers",
        "tags": [
          "Customers"
        ],
        "responses": {
          "200": {
            "description": "List of all customers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Customer"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createCustomer",
        "tags": [
          "Customers"
        ],
        "requestBody": {
          "description": "Customer data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCustomer"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Customer created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "400": {
            "description": "Customer not created because of validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/customer/{id}": {
      "get": {
        "operationId": "showCustomer",
        "tags": [
          "Customers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of user to show",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "ing64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return user with given id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "404": {
            "description": "Customer not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateCustomer",
        "tags": [
          "Customers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of customer to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "ing64"
            }
          }
        ],
        "requestBody": {
          "description": "Customer new data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCustomer"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Customer updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "404": {
            "description": "Customer not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteCustomer",
        "tags": [
          "Customers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of customer to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "ing64"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Customer deleted successfully"
          },
          "404": {
            "description": "Customer not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      }
    },
    "/providers": {
      "get": {
        "operationId": "listProviders",
        "tags": [
          "Providers"
        ],
        "responses": {
          "200": {
            "description": "List of all providers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Provider"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createProvider",
        "tags": [
          "Providers"
        ],
        "requestBody": {
          "description": "Provider data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewProvider"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Provider created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Provider"
                }
              }
            }
          },
          "400": {
            "description": "Provider not created because of validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/provider/{id}": {
      "get": {
        "operationId": "showProvider",
        "tags": [
          "Providers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of user to show",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "ing64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return user with given id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Provider"
                }
              }
            }
          },
          "404": {
            "description": "Provider not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateProvider",
        "tags": [
          "Providers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of provider to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "ing64"
            }
          }
        ],
        "requestBody": {
          "description": "Provider new data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewProvider"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Provider updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Provider"
                }
              }
            }
          },
          "404": {
            "description": "Provider not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteProvider",
        "tags": [
          "Providers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of provider to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "ing64"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Provider deleted successfully"
          },
          "404": {
            "description": "Provider not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NewUser"
          },
          {
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "NewUser": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "ValidationError": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ValidationError"
            ]
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationErrorDetail"
            }
          }
        }
      },
      "ValidationErrorDetail": {
        "properties": {
          "message": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        }
      },
      "NotFoundError": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "NotFoundError"
            ]
          },
          "details": {
            "type": "string",
            "enum": [
              "User with id {id} not found"
            ]
          }
        }
      },
      "Customer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NewCustomer"
          },
          {
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "NewCustomer": {
        "required": [
          "email"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          }
        }
      },
      "Provider": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NewProvider"
          },
          {
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "NewProvider": {
        "required": [
          "email name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "eamil": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "logo": {
            "type": "string"
          }
        }
      }
    }
  }
}